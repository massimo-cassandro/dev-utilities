/*! @massimo-cassandro/dev-utilities v.1.20.0 - novembre 2023 */
!function(){"use strict";var e={times:"&VeryThinSpace;&times;&VeryThinSpace;",unitSpacing:"&VeryThinSpace;",storage_key:"lt_settings",settings:{hidden:!1,pictures_info:!1},upd_settings:n=>{e.settings=Object.assign({},e.settings,n),sessionStorage[e.storage_key]=JSON.stringify(e.settings)}};!function(){const n=sessionStorage[e.storage_key]?JSON.parse(sessionStorage[e.storage_key]):{};e.settings=Object.assign({},e.settings,n);let t=document.currentScript;e.currentDir=t.src.split("?")[0],e.currentDir=e.currentDir.substring(0,e.currentDir.lastIndexOf("/")),e.framework=(t.dataset.fw||"bs5").replace(/^bootstrap(\d+)/,"bs$1"),e.position=t.dataset.position||"top-left",e.css=t.dataset.css||e.currentDir+"/layout-tools.css";let s=document.createElement("link");s.onload=function(){!function(){let n=null;const t="lt-wrapper",s=[".sf-toolbar"],i=()=>(null===n&&(n=[],s.forEach((e=>{let t=document.querySelector(e);t&&n.push(t)}))),n);document.body.insertAdjacentHTML("beforeend",`<div id="${t}" class="lt-wrapper lt-collapsed ${e.position}"></div>`),e.wrapper=document.getElementById(t),e.wrapper.innerHTML='<div class="lt-inner-wrapper">\n      <div class="lt-content">\n        <div>\n          <button type="button" class="lt-hide-show-btn">Hide</button>\n          <button type="button" class="lt-remove-btn">Remove</button>\n        </div>\n      </div>\n      <div class="lt-brkpt">&#x2732;</div>\n    </div>',e.content_wrapper=e.wrapper.querySelector(".lt-content"),e.brkpt_wrapper=e.wrapper.querySelector(".lt-brkpt"),e.brkpt_wrapper.addEventListener("click",(function(){e.wrapper.classList.toggle("lt-collapsed")}),!1);const r=e.content_wrapper.querySelector(".lt-hide-show-btn"),o=n=>{e.wrapper.classList.toggle("lt-hidden");let t=e.wrapper.classList.contains("lt-hidden");i().forEach((e=>{e.toggleAttribute("hidden",t)})),r.innerHTML=t?"Show":"Hide",n&&e.upd_settings({hidden:t})};r.addEventListener("click",(()=>{o(!0)}),!1),e.settings.hidden&&o(!1),e.content_wrapper.querySelector(".lt-remove-btn").addEventListener("click",(()=>{e.wrapper.remove(),i().forEach((e=>{e.remove()})),e.upd_settings({hidden:!1})}))}(),e.framework&&(e.brkpt_wrapper.innerHTML={bs3:'<span class="visible-xs-inline">xs</span><span class="visible-sm-inline">sm</span><span class="visible-md-inline">md</span><span class="visible-lg-inline">lg</span>',bs4:'<span class="d-sm-none">xs</span><span class="d-none d-sm-inline d-md-none">sm</span><span class="d-none d-md-inline d-lg-none">md</span><span class="d-none d-lg-inline d-xl-none">lg</span><span class="d-none d-xl-inline">xl</span>',bs5:'<span class="d-sm-none">xs</span><span class="d-none d-sm-inline d-md-none">sm</span><span class="d-none d-md-inline d-lg-none">md</span><span class="d-none d-lg-inline d-xl-none">lg</span><span class="d-none d-xl-inline d-xxl-none">xl</span><span class="d-none d-xxl-inline">xxl</span>',foundation6:'<span class="show-for-small-only">small</span><span class="show-for-medium-only">medium</span><span class="show-for-large-only">large</span><span class="show-for-xlarge">xlarge</span>'}[e.framework]),function(){e.content_wrapper.insertAdjacentHTML("beforeend",'<div class="lt-vpinfo"></div>');const n=e.content_wrapper.querySelector(".lt-vpinfo"),t=parseFloat(window.getComputedStyle(document.body,null).getPropertyValue("font-size")),s=function(){let s=Math.max(document.documentElement.clientWidth||0,window.innerWidth||0),i=Math.max(document.documentElement.clientHeight||0,window.innerHeight||0),r=(s/t).toFixed(2),o=(i/t).toFixed(2),a=document.documentElement.clientWidth,d=(a/t).toFixed(2),l=document.documentElement.clientHeight,c=(l/t).toFixed(2);n.innerHTML=`<div class="heading">Viewport info</div>\n        ${s}${e.times}${i}${e.unitSpacing}px\n        /\n        ${r}${e.times}${o}${e.unitSpacing}em\n        <br><br>\n        <strong>body*:</strong><br>\n        ${a}${e.times}${l}${e.unitSpacing}px\n        /\n        ${d}${e.times}${c}${e.unitSpacing}em\n        <br>\n        <small><em>(*) Altezza uguale a viewport se body height: 100%</em></small>`};s(),"ResizeObserver"in window?new ResizeObserver((()=>{s()})).observe(document.body):window.onresize=s}(),e.content_wrapper.insertAdjacentHTML("beforeend",'<div class="lt-device-info"></div>'),e.content_wrapper.querySelector(".lt-device-info").innerHTML=`<div class="heading">Device info</div>\n    <dl>\n      <dt>userAgent</dt>\n      <dd>\n        ${window.navigator.userAgent}\n      </dd>\n      <dt>devicePixelRatio</dt>\n      <dd>\n        ${window.devicePixelRatio}\n      </dd>\n      <dt>screen.width / height</dt>\n      <dd>\n        ${window.screen.width}${e.times}${window.screen.height}${e.unitSpacing}px\n      </dd>\n    </dl>`,function(){e.content_wrapper.insertAdjacentHTML("beforeend",'<div><label><input type="checkbox" id="lt-imgs-info-trigger" class="lt-imgs-info-trigger">Imgs info</label</div>');let n=document.getElementsByTagName("img");const t=e.content_wrapper.querySelector(".lt-imgs-info-trigger"),s=(e,n)=>n?-1!==["src","currentSrc","srcset"].indexOf(e)?n.split(",").map((e=>(e=>{let n=e.trim().split("/");return`<span title="${e}">${n.length>2?"[&hellip;] /":""}${n.slice(-2).join("/")}</span>`})(e))).join(",<br>"):n:"&mdash;",i=()=>{[...n].forEach((e=>{e.insertAdjacentHTML("afterend",`<details class="lt-img-info-wrapper">\n            <summary>Info</summary>\n            <table>\n              <tbody>\n                ${(()=>{let n="";return["src","currentSrc","srcset","sizes","media","width","height","naturalWidth","naturalHeight","id","className"].forEach((t=>{n+=`<tr>\n              <th scope="row">${t}</th>\n              <td class="lt-img-${t}">${s(t,e[t])}</td>\n            </tr>`})),n})()}\n              </tbody>\n            </table>\n          </details>`)}))},r=()=>{const e=["currentSrc","width","height"];[...n].forEach((n=>{e.forEach((e=>{let t=n.nextElementSibling.querySelector(`td.lt-img-${e}`);t&&(t.innerHTML=s(e,n[e]))}))}))};t.addEventListener("click",(()=>{e.upd_settings({imgs_info:t.checked}),t.checked?i():document.querySelectorAll(".lt-img-info-wrapper").forEach((e=>{e.remove()}))}),!1),e.settings.imgs_info&&(i(),t.checked=!0),"ResizeObserver"in window?new ResizeObserver((()=>{t.checked&&r()})).observe(document.body):window.onresize=function(){t.checked&&r()}}()},s.href=e.css+"?v=1.20.1",s.rel="stylesheet",s.type="text/css",s.media="screen",document.head.appendChild(s)}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
